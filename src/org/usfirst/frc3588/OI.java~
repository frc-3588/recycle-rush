// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3588;

import org.usfirst.frc3588.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	// // CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	// // TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick;
    public JoystickButton lift1Button;
    public JoystickButton liftlUpButton;
    public JoystickButton liftDownButton;
    public JoystickButton liftArmsInButton;
    public JoystickButton liftArmsOutButton;
    public JoystickButton acquireToteContainerButton;
    public JoystickButton releaseToteContainerButton;
    public Joystick controller;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        controller = new Joystick(1);
        
        releaseToteContainerButton = new JoystickButton(controller, 2);
        releaseToteContainerButton.whileHeld(new ReleaseToteContainerCommand());
        acquireToteContainerButton = new JoystickButton(controller, 1);
        acquireToteContainerButton.whileHeld(new AcquireToteContainerCommand());
        liftArmsOutButton = new JoystickButton(controller, 7);
        liftArmsOutButton.whileHeld(new LiftArmsOutCommand());
        liftArmsInButton = new JoystickButton(controller, 8);
        liftArmsInButton.whileHeld(new LiftArmsInCommand());
        liftDownButton = new JoystickButton(controller, 6);
        liftDownButton.whileHeld(new LiftDownCommand());
        liftlUpButton = new JoystickButton(controller, 5);
        liftlUpButton.whileHeld(new LiftUpCommand());
        lift1Button = new JoystickButton(controller, 16);
        lift1Button.whenPressed(new Lift1());
        joystick = new Joystick(0);
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("AutoGroup", new AutoGroup());

        SmartDashboard.putData("AcquireToteContainerCommand", new AcquireToteContainerCommand());

        SmartDashboard.putData("ReleaseToteContainerCommand", new ReleaseToteContainerCommand());

        SmartDashboard.putData("Lift1", new Lift1());

        SmartDashboard.putData("LiftUpCommand", new LiftUpCommand());

        SmartDashboard.putData("LiftDownCommand", new LiftDownCommand());

        SmartDashboard.putData("LiftArmsInCommand", new LiftArmsInCommand());

        SmartDashboard.putData("LiftArmsOutCommand", new LiftArmsOutCommand());

        SmartDashboard.putData("DriveRobotCommand", new DriveRobotCommand());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    public Joystick getController() {
        return controller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
