// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3588.commands;

import org.usfirst.frc3588.Robot;
import org.usfirst.frc3588.RobotMap;

import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class Lift1 extends Command {
	int startingPoint;
	// this will be set later after testing
	int rotationsPerTote = 0;
	int rotationsToGo = rotationsPerTote + RobotMap.liftingShaftEncoder.get();

	public Lift1() {

		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lifting);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		setTimeout(5);

	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		// startingPoint = RobotMap.liftingShaftEncoder.get();
		// while (RobotMap.liftingShaftEncoder.get() - startingPoint <=
		// rotationsToGo) {
		// // might change power level later
		RobotMap.liftingLiftMotor.set(-0.5);
		// }
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return isTimedOut();
		// if (RobotMap.liftingShaftEncoder.get() - startingPoint ==
		// rotationsPerTote) {
		// return true;
		// } else {
		// return false;
		// }
	}

	// Called once after isFinished returns true
	protected void end() {
		RobotMap.liftingLiftMotor.set(0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
